/*
 * Forms submission
 * API work with forms
 *
 * OpenAPI spec version: 1.0.0
 * Contact: CARNEIN@allianz.fr
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AutocollectionFields;
import io.swagger.client.model.AutomalusFields;
import io.swagger.client.model.BackupAutoFields;
import io.swagger.client.model.BackupHabitationFields;
import io.swagger.client.model.BikeFields;
import io.swagger.client.model.BoatFields;
import io.swagger.client.model.BordererFields;
import io.swagger.client.model.CapitalTransferFields;
import io.swagger.client.model.CaravanFields;
import io.swagger.client.model.CompletRetirementFields;
import io.swagger.client.model.ContactFields;
import io.swagger.client.model.DeathFields;
import io.swagger.client.model.DependencyFields;
import io.swagger.client.model.EnergyFields;
import io.swagger.client.model.EquipmentFields;
import io.swagger.client.model.FuneralFields;
import io.swagger.client.model.GrandchildrenFields;
import io.swagger.client.model.HandicapFields;
import io.swagger.client.model.HoverboardFields;
import io.swagger.client.model.HunterFields;
import io.swagger.client.model.ImproveRetirementFields;
import io.swagger.client.model.InheritanceRightFields;
import io.swagger.client.model.LifeInsuranceFields;
import io.swagger.client.model.LocalFields;
import io.swagger.client.model.MotoFields;
import io.swagger.client.model.NolicenseFields;
import io.swagger.client.model.PatrimonyFields;
import io.swagger.client.model.PetFields;
import io.swagger.client.model.PoolFields;
import io.swagger.client.model.ProvidentFields;
import io.swagger.client.model.QuadFields;
import io.swagger.client.model.RealEstateFields;
import io.swagger.client.model.RetirementCapitalFields;
import io.swagger.client.model.RightsFields;
import io.swagger.client.model.RototillerFields;
import io.swagger.client.model.SavingTaxFields;
import io.swagger.client.model.SchoolFields;
import io.swagger.client.model.SocialFields;
import io.swagger.client.model.SporthighFields;
import io.swagger.client.model.SportlowFields;
import io.swagger.client.model.WinecellarFields;
import io.swagger.client.model.WorkstopFields;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FormsApi
 */
@Ignore
public class FormsApiTest {

    private final FormsApi api = new FormsApi();

    
    /**
     * Submission of collection cars form.
     *
     * Process for autocollection form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autocollectionSubmissionTest() throws ApiException {
        AutocollectionFields criteria = null;
        String response = api.autocollectionSubmission(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of automalus form.
     *
     * Process for automalus form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void automalusSubmissionTest() throws ApiException {
        AutomalusFields criteria = null;
        String response = api.automalusSubmission(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of backupAuto form.
     *
     * Process for back up auto form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void backupAutoTest() throws ApiException {
        BackupAutoFields criteria = null;
        String response = api.backupAuto(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of backupHabitation form.
     *
     * Process for back up habitation form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void backupHabitationTest() throws ApiException {
        BackupHabitationFields criteria = null;
        String response = api.backupHabitation(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of bike form.
     *
     * Process for bike form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void bikeSubmissionTest() throws ApiException {
        BikeFields criteria = null;
        String response = api.bikeSubmission(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of boat form.
     *
     * Process for boat form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void boatSubmissionTest() throws ApiException {
        BoatFields criteria = null;
        String response = api.boatSubmission(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of borderer form.
     *
     * Process for borderer form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void bordererSubmissionTest() throws ApiException {
        BordererFields criteria = null;
        String response = api.bordererSubmission(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of CapitalTransfer form.
     *
     * Process for CapitalTransfer form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void capitalTransferTest() throws ApiException {
        CapitalTransferFields criteria = null;
        String response = api.capitalTransfer(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of caravan form.
     *
     * Process for caravan form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void caravanSubmissionTest() throws ApiException {
        CaravanFields criteria = null;
        String response = api.caravanSubmission(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of completRetirement form.
     *
     * Process for completRetirement form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void completRetirementTest() throws ApiException {
        CompletRetirementFields criteria = null;
        String response = api.completRetirement(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of contact form.
     *
     * Process for contact form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contactSubmissionTest() throws ApiException {
        ContactFields criteria = null;
        String response = api.contactSubmission(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of death form.
     *
     * Process for death form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deathSubmissionTest() throws ApiException {
        DeathFields criteria = null;
        String response = api.deathSubmission(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of dependency form.
     *
     * Process for dependency form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dependencySubmissionTest() throws ApiException {
        DependencyFields criteria = null;
        String response = api.dependencySubmission(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of energy form.
     *
     * Process for energy form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void energySubmissionTest() throws ApiException {
        EnergyFields criteria = null;
        String response = api.energySubmission(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of equipment form.
     *
     * Process for equipment form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void equipmentSubmissionTest() throws ApiException {
        EquipmentFields criteria = null;
        String response = api.equipmentSubmission(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of funeral form.
     *
     * Process for funeral form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void funeralSubmissionTest() throws ApiException {
        FuneralFields criteria = null;
        String response = api.funeralSubmission(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of Grandchildren form.
     *
     * Process for Grandchildren form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void grandchildrenTest() throws ApiException {
        GrandchildrenFields criteria = null;
        String response = api.grandchildren(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of handicap form.
     *
     * Process for handicap form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void handicapSubmissionTest() throws ApiException {
        HandicapFields criteria = null;
        String response = api.handicapSubmission(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of hoverboard form.
     *
     * Process for hoverboard form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hoverboardSubmissionTest() throws ApiException {
        HoverboardFields criteria = null;
        String response = api.hoverboardSubmission(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of hunter form.
     *
     * Process hunter form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hunterSubmissionTest() throws ApiException {
        HunterFields criteria = null;
        String response = api.hunterSubmission(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of Improve Retirement form.
     *
     * Process for ImproveRetirement form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void improveRetirementTest() throws ApiException {
        ImproveRetirementFields criteria = null;
        String response = api.improveRetirement(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of InheritanceRight form.
     *
     * Process for InheritanceRight form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void inheritanceRightTest() throws ApiException {
        InheritanceRightFields criteria = null;
        String response = api.inheritanceRight(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of LifeInsurance form.
     *
     * Process for LifeInsurance form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lifeInsuranceTest() throws ApiException {
        LifeInsuranceFields criteria = null;
        String response = api.lifeInsurance(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of local form.
     *
     * Process for local form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void localSubmissionTest() throws ApiException {
        LocalFields criteria = null;
        String response = api.localSubmission(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of moto form.
     *
     * Process for moto form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void motoSubmissionTest() throws ApiException {
        MotoFields criteria = null;
        String response = api.motoSubmission(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of no licence cars form.
     *
     * Process for nolicense form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void nolicenseSubmissionTest() throws ApiException {
        NolicenseFields criteria = null;
        String response = api.nolicenseSubmission(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of patrimony form.
     *
     * Process for patrimony form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patrimonySubmissionTest() throws ApiException {
        PatrimonyFields criteria = null;
        String response = api.patrimonySubmission(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of pet form.
     *
     * Process for pet form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void petSubmissionTest() throws ApiException {
        PetFields criteria = null;
        String response = api.petSubmission(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of pool form.
     *
     * Process for pool form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void poolSubmissionTest() throws ApiException {
        PoolFields criteria = null;
        String response = api.poolSubmission(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of provident form.
     *
     * Process for provident form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void providentSubmissionTest() throws ApiException {
        ProvidentFields criteria = null;
        String response = api.providentSubmission(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of quad form.
     *
     * Process for quad form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quadSubmissionTest() throws ApiException {
        QuadFields criteria = null;
        String response = api.quadSubmission(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of realEstate form.
     *
     * Process for real estate form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void realEstateTest() throws ApiException {
        RealEstateFields criteria = null;
        String response = api.realEstate(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of retirementCapital form.
     *
     * Process for retirement capital form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retirementCapitalTest() throws ApiException {
        RetirementCapitalFields criteria = null;
        String response = api.retirementCapital(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of rights form.
     *
     * Process for right form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rightSubmissionTest() throws ApiException {
        RightsFields criteria = null;
        String response = api.rightSubmission(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of rototiller form.
     *
     * Process for rototiller form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rototillerSubmissionTest() throws ApiException {
        RototillerFields criteria = null;
        String response = api.rototillerSubmission(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of SavingTax form.
     *
     * Process for SavingTax form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savingTaxTest() throws ApiException {
        SavingTaxFields criteria = null;
        String response = api.savingTax(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of school form.
     *
     * Process for school form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void schoolSubmissionTest() throws ApiException {
        SchoolFields criteria = null;
        String response = api.schoolSubmission(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of social form.
     *
     * Process for social form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void socialSubmissionTest() throws ApiException {
        SocialFields criteria = null;
        String response = api.socialSubmission(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of sporthigh form.
     *
     * Process for sporthigh form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sporthighSubmissionTest() throws ApiException {
        SporthighFields criteria = null;
        String response = api.sporthighSubmission(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of sports low level form.
     *
     * Process for sports low level form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sportlowSubmissionTest() throws ApiException {
        SportlowFields criteria = null;
        String response = api.sportlowSubmission(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of wine cellar form.
     *
     * Process for wine cellar form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void winecellarSubmissionTest() throws ApiException {
        WinecellarFields criteria = null;
        String response = api.winecellarSubmission(criteria);

        // TODO: test validations
    }
    
    /**
     * Submission of workstop form.
     *
     * Process for workstop form submission
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workstopSubmissionTest() throws ApiException {
        WorkstopFields criteria = null;
        String response = api.workstopSubmission(criteria);

        // TODO: test validations
    }
    
}
